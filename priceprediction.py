# -*- coding: utf-8 -*-
"""priceprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MFnn9OBSVehnAQTQRSYmByITn_wIcj1G
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib  # or pickle
from sklearn.pipeline import Pipeline

# Read dataframe on brands and models
file_path = 'carbrandmodellist.csv'
df = pd.read_csv(file_path)

luxury_brands = ["ALFA ROMEO", "ASTON MARTIN", "AUDI", "BENTLEY", "BMW", "CADILLAC", "FERRARI", "JAGUAR", "LAMBORGHINI", "LAND ROVER", "LEXUS", "LOTUS", "MASERATI", "MCLAREN", "MERCEDES-BENZ", "MERCEDES-MAYBACH", "PORSCHE", "ROLLS-ROYCE", "TESLA", "VOLKSWAGEN", "VOLVO"]

# Define predefined lists
transmission_options = ['Automatic', 'Manual']
color_options = ['Beige', 'Black', 'Blue', 'Brown', 'Bronze', 'Dark Blue', 'Gold', 'Gray', 'Green', 'Magenta', 'Maroon', 'Olive', 'Orange', 'Pink', 'Purple', 'Red', 'Silver', 'White', 'Yellow']
condition_options = ['Commercial Car', 'New Car', 'Recon Car', 'Used Car']
location_options = ['Johor', 'Kedah', 'Kelantan', 'Kuala Lumpur', 'Labuan', 'Melaka', 'Negeri Sembilan', 'Pahang', 'Penang', 'Perak', 'Putrajaya', 'Sabah', 'Selangor', 'Sarawak', 'Terengganu', 'Perlis', 'Pulau Pinang']

# Load trained pipeline and model
pipeline = joblib.load('pipeline_xgb.pkl')
model_xgb = joblib.load('model_xgb.pkl')

st.title("ðŸš— Car Price Prediction App")

st.markdown("Fill in the details below to predict the estimated **used car price**.")

# --- Input form
brand = st.selectbox("Brand", sorted(df['Brand'].unique()))
model = st.selectbox("Model", sorted(df[df['Brand'] == brand]['Model'].unique()))
variant = st.selectbox("Variant", sorted(df[df['Model'] == model]['Variant'].unique()))
engine = st.number_input("Engine (cc)", min_value=0, max_value=8000, step=100)
condition = st.selectbox("Condition", condition_options, index=condition_options.index('Used Car'))
location = st.selectbox("Location", location_options)
mileage = st.number_input("Mileage (km)", min_value=0, step=1000)
color = st.selectbox("Color", color_options)
year = st.slider("Year", min_value=1970, max_value=2024, value=2020)
transmission = st.selectbox("Transmission", transmission_options)

# Display the selected car type (Luxury or Regular) based on the brand
car_type = 'Luxury' if brand.upper() in luxury_brands else 'Regular'
st.write(f"Car Type: {car_type}")

# --- Predict Button
if st.button("Predict Price"):
    # Create a DataFrame for input
    input_df = pd.DataFrame([{
        'Brand': brand,
        'Model': model,
        'Variant': variant,
        'Engine': engine,
        'Condition': condition,
        'Location': location,
        'Mileage': mileage,
        'Color': color,
        'Year': year,
        'Transmission': transmission,
        'Car Type': car_type
    }])

    # Transform and predict
    transformed_input = pipeline.transform(input_df)
    prediction = model_xgb.predict(transformed_input)

    st.success(f"ðŸ’° Estimated Price: **RM {prediction[0]:,.2f}**")
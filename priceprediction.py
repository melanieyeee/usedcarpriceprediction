# -*- coding: utf-8 -*-
"""priceprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MFnn9OBSVehnAQTQRSYmByITn_wIcj1G
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib  # or pickle
from sklearn.pipeline import Pipeline

# Define luxury car brands in uppercase
luxury_brands = [
    "ALFA ROMEO", "ASTON MARTIN", "AUDI", "BENTLEY", "BMW", "CADILLAC",
    "FERRARI", "JAGUAR", "LAMBORGHINI", "LAND ROVER", "LEXUS", "LOTUS",
    "MASERATI", "MCLAREN", "MERCEDES-BENZ", "MERCEDES-MAYBACH", "PORSCHE",
    "ROLLS-ROYCE", "TESLA", "VOLVO"
]

# Example dataframe for car details
df = pd.DataFrame({
    'Brand': ['Toyota', 'Honda', 'BMW', 'Ford'],
    'Model': ['Corolla', 'Civic', 'X5', 'Focus'],
    'Variant': ['SE', 'EX', 'M Sport', 'Titanium'],
    'Engine': [1800, 2000, 3000, 2500],
    'Condition': ['Used', 'New', 'Used', 'New'],
    'Location': ['KL', 'Penang', 'Selangor', 'Johor'],
    'Mileage': [100000, 5000, 80000, 20000],
    'Color': ['Red', 'Blue', 'Black', 'White'],
    'Year': [2015, 2021, 2018, 2020],
    'Transmission': ['Automatic', 'Manual', 'Automatic', 'Automatic']
})

# Convert to uppercase and add 'Car Type' column based on the brand
df['Brand'] = df['Brand'].str.upper()  # Convert to uppercase for consistency
df['Car Type'] = df['Brand'].apply(lambda x: 'Luxury' if x in luxury_brands else 'Regular')

# Load trained pipeline and model
pipeline = joblib.load('pipeline_xgb.pkl')
model_xgb = joblib.load('model_xgb.pkl')

st.title("ðŸš— Car Price Prediction App")

st.markdown("Fill in the details below to predict the estimated **used car price**.")

# --- Input form
brand = st.selectbox("Brand", sorted(df['Brand'].unique()))
model = st.selectbox("Model", sorted(df[df['Brand'] == brand]['Model'].unique()))
variant = st.selectbox("Variant", sorted(df[df['Model'] == model]['Variant'].unique()))
engine = st.number_input("Engine (cc)", min_value=0, max_value=8000, step=100)
condition = st.selectbox("Condition", sorted(df['Condition'].unique()))
location = st.selectbox("Location", sorted(df['Location'].unique()))
mileage = st.number_input("Mileage (km)", min_value=0, step=1000)
color = st.selectbox("Color", sorted(df['Color'].unique()))
year = st.slider("Year", min_value=1990, max_value=2025, value=2020)
transmission = st.selectbox("Transmission", sorted(df['Transmission'].unique()))

# Display the selected car type (Luxury or Regular) based on the brand
car_type = 'Luxury' if brand.upper() in luxury_brands else 'Regular'
st.write(f"Car Type: {car_type}")

# --- Predict Button
if st.button("Predict Price"):
    # Create a DataFrame for input
    input_df = pd.DataFrame([{
        'Brand': brand,
        'Model': model,
        'Variant': variant,
        'Engine': engine,
        'Condition': condition,
        'Location': location,
        'Mileage': mileage,
        'Color': color,
        'Year': year,
        'Transmission': transmission,
        'Car Type': car_type
    }])

    # Transform and predict
    transformed_input = pipeline.transform(input_df)
    prediction = model_xgb.predict(transformed_input)

    st.success(f"ðŸ’° Estimated Price: **RM {prediction[0]:,.2f}**")